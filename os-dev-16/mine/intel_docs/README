https://software.intel.com/en-us/articles/intel-sdm

8086 programming guide == 16-bit mode guide ?

Volume 1: Basic Architecture
Volume 2A,2B,2C,2D: Instruction Set Reference
Volume 3A,3B,3C,3D: System Programming Guide

1.3.1 Bit and Byte Order -- little endian

Highest
Address
	32______________24_23____________16_15____________8_7___________0_	<- Bit offset
	|_________________|________________|_______________|______________28
	|_________________|________________|_______________|______________24
	|_________________|________________|_______________|______________20
	|_________________|________________|_______________|______________16
	|_________________|________________|_______________|______________12
	|_________________|________________|_______________|______________8
	|_________________|________________|_______________|______________4
	|____Byte_3_______|____Byte_2______|___Byte_1______|__Byte_0______0	Lowest
										Address	
									  ^
									  |
									Byte Offset

2.1.1 16-bit Processors and Segmentation (1978)
with segmentation, a 16-bit segment register contains a pointer to a memory segment of up to 64KBytes.
using four segment registers at a time -> 256KBytes
20-bit address, a segment register, an additional 16-bit pointer -> 1MByte

3.2 OVERVIEW OF THE BASIC EXECUTION ENVIRONMENT
Basic program execution registers:
	32-bit general-purpose register * 8
	16-bit segment register * 6
	32-bit EFLAGS register
	32-bit EIP(instruction pointer) register
	stack -- Section 6.2

CR0~CR4: 5 control register determine the operating mode of the processor and the characteristics of the currently executing task. -- for 16-bit real mode to protect mode?

3.3.1 IA-32 Memory Models
	Flat memory model: linear address 0~2^32-1 (not in 64-bit mode)
	Segmented memory model: "far pointer"; purpose: increase reliability
	Real-address mode memory model: for 8086 (chapter20 "8086 Emulation") ---- it's 16-bit real mode?
	"figure 3-3. Three Memory Management Models"

3.3.4 Modes of Operation vs. Memory Model
	real-address mode -> real-address mode memory model

3.4 BASIC PROGRAM EXECUTION REGISTERS
	General-purpose registers. These eight registers are avalible for storing operands and pointers.
	Segment registers. These registers hold up to six segment selectors.
	EFLAGS(program status and control) register. The EFLAGS register report on the status of the program being executed and allows limited (application-program level) control of the processor.
	EIP(instrunction pointer) register. The EIP register contains a 32-bit pointer to the next instruction to be executed.

3.4.1 General-purpose Registers

	31___________16_15____8_7______0   16-bit   32-bit
	|______________|___AH__|___AL__|     AX       EAX
	|______________|___BH__|___BL__|     BX       EBX
	|______________|___CH__|___CL__|     CX       ECX
	|______________|___DH__|___DL__|     DX       EDX
	|______________|_______BP______|              EBP
	|______________|_______SI______|              ESI
	|______________|_______DI______|              EDI
	|______________|_______SP______|              ESP

	               _15_____________0
	               |_______________|     CS -- code segment
	               |_______________|     DS -- d
	               |_______________|     ES -- a
	               |_______________|     FS -- t  segment
	               |_______________|     GS -- a
	               |_______________|     SS -- stack segment

	31_____________________________0   
	|______________________________|     EFLAGS

	31_____________________________0   
	|______________________________|     EIP

	"special use"

3.4.3 EFLAGS Register
	the flag of every bit
	TSS: task state segment

6.2 STACKS
	ESP: top of stack pointer
	EBP: set to point to return intruction pointer
	push -> towards lesser addresses
	only one stack is available at a time -> SS
