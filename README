1. Introduction
2. Computer Architecture and the Boot Process
	|_2.1 The Boot Process: BIOS, boot sector, magic number
	|_2.2 BIOS, Boot Blocks, and the Magic Number: use KVM, qemu raw disk, xxd, hexdump to do the example, interesting
	|_2.3 CPU Emulation
	|	|_2.3.1 Bochs: A x86 CPU Emulator
	|	|_2.3.2 QEmu
	|_2.4 The Usefulness of Hexadecimal Notation
3. Boot Sector Programming (in 16-bit Real Mode)
	|_3.1 Boot Sector Re-visited: Another way to create boot sector(the raw disk created by qemu-img and xdd before) -- nasm; 
	|	besides using kvm vm, we can use qemu-system-i386 + (bin file/raw disk) to run the code;
	|_3.2 16-bit Real Mode
	|_3.3 Erm, Hello?
	|	|_3.3.1 Interrupts
	|	|_3.3.2 CPU Registers
	|	|_3.3.3 Putting it all Together: use int 0x10 to print something when boot
	|_3.4 Hello, World!
	|	|_3.4.1 Memory, Address, and Labels: boot sector location in memory -- 0x7c00
	|	|_3.4.2 'X' Marks the Spot: find X program. NEED ENHANCE ASM LANG.
	|	|	The fourth way is not correct for me. Why?
	|	|	|_Question 1: The second is correct, the other are wrong.
	|	|_3.4.3 Defining Strings: no example, not understand...
	|	|_3.4.4 Using the Stack: bp -- stack bottom pointer; sp -- stack pointer
	|	|	|_Question 2: I don't know the address
	|	|_3.4.5 Control Structures: cmp -> je,jne,jl,jle,jg,jge
	|	|	|_Question 3: easy
	|	|_3.4.6 Calling Functions: function -> jmp + jmp back -> call + ret; pusha and popa to save and restore the registers
	|	|_3.4.7 Include Files: %include "xxx.asm"
	|	|_3.4.8 Putting it all Together: the whole code including the feature above: interesting. I tried half an hour or maybe longer
	|		to finish the code. Be carefull that the "[bx]" and add "bx, 1".
	|		And if i use pusha and popa in the function. The program will just output hello world but not goodbye, why?
	|		And don't forget the "mov ah, 0x0e" in the function, without it, qemu can't figure it out as an bootable disk, why?
	|_3.5 Nurse, Fetch me my Steth-o-scope
	|	|_3.5.1 Question 5 (Advanced): I don't know how to write print_hex yet.
	|	|	But If I do nothing, "HEX_OUT" will print twice sometimes. Why?
	|	|	After all day hard work, I wrote a ugly print_hex, and almost mad. NEED LEARN BASIC ASM.
	|_3.6 Reading the Disk
	|	|_3.6.1 Extended Memory Access Using Segments
	|	|	|_Segment register: cs,ds(data),ss(stack),es
	|	|	|_Find sth interesting, an 16-bit real mode OS: https://github.com/appusajeev/os-dev-16
	|	|		|_https://appusajeev.wordpress.com/2011/01/27/writing-a-16-bit-real-mode-os-nasm/
	|	|_3.6.2 How Disk Drive Work: cylinder, head, sector
	|	|_3.6.3 Using BIOS to Read the Disk: int 0x13 function
	|	|_3.6.4 Putting it all Together: I run the example, and got disk error!...
